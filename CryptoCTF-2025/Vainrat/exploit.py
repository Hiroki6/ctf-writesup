from mpmath import mp
from Crypto.Util.number import *

nbit = 110
prec = 4 * nbit
mp.prec = prec
mp.dps = 500

def reverse_rat(x, y):
    y0 = (y ** 2) / x
    x0 = 2 * x - y0
    return mp.mpf(x0), mp.mpf(y0)

def get_x0_x(y0, y):
    x = (y ** 2) / y0
    x0 = 2 * x - y0
    return mp.mpf(x0), mp.mpf(x)

original_y = mp.mpf("0.821678202592029840640488834626560793324753326620256635180524944323511676443467897250373271205925559084872165722454754934788227497666")
y = mp.mpf("0.773365244980878269659723009287896063454399827068809910292134194830046587885268911767353965271126936475827362832564262574076965973911")
y0 = mp.mpf("0.773365245110229560369109516556336837413347439447480207344363740888993277142640995641465266908673913897758285634622864886689616731191")

x0, x = get_x0_x(y0, y)

x_current = x0
y_current = y0
for i in range(14):
    x_current, y_current = reverse_rat(mp.mpf(x_current), mp.mpf(y_current))

assert(mp.nstr(original_y, 50) == mp.nstr(y_current, 50))
original_x = x_current

for d in range(1, len(str(original_x))):
    m_candidate_int = int(mp.nint(original_x * mp.power(10, d)))
    if len(str(m_candidate_int)) == d:
        try:
            message_bytes = long_to_bytes(m_candidate_int)
            print(f"Flag: {message_bytes.decode()}")
        except Exception:
            continue
